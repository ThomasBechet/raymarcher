#version 450 core

#define MAX_DISTANCE       300
#define MIN_HIT_DISTANCE   0.00001
#define EPSILON            0.0005
#define PI                 3.14159265359
#define MAX_SHAPE_COUNT    128
#define MAX_MATERIAL_COUNT 64
#define MAX_INSTANCE_COUNT 128

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(location = 1) uniform vec3 eye;
layout(location = 2) uniform vec3 ray00;
layout(location = 3) uniform vec3 ray01;
layout(location = 4) uniform vec3 ray10;
layout(location = 5) uniform vec3 ray11;

layout(binding = 0, location = 0, rgba32f) uniform image2D image;

/* ------------- Structures --------------- */
struct Material {
    vec3 albedo;	 // 12 0
    float roughness; // 4  12
	float metallic;  // 4  16
	int _pad0;		 // 4  20
	int _pad1;		 // 4  24
	int _pad2;		 // 4  28
	// total 32
};

struct Shape {
    int type;       // 4  0
    int materialID; // 4  4
    int _pad0;      // 4  8
    int _pad1;      // 4  12
    vec3 position;  // 12 16
    vec4 f0;        // 16 32
    vec4 f1;        // 16 48
	// total 52
};

/* ------------- UBO ---------------------- */
layout(binding = 1, std140) uniform LayoutHeader {
    int materialCount;
    int shapeCount;
};

layout(binding = 2, std140) uniform Materials {
    Material materials[MAX_MATERIAL_COUNT];
};

layout(binding = 3, std140) uniform Shapes {
    Shape shapes[MAX_SHAPE_COUNT];
};

/* ------------ SHAPES SDF --------- */

#SHAPE_SD_FUNCTIONS

/* ----------- SCENE -------------- */

#MAP_SD_FUNCTION

float map(in vec3 p) {
    float sd = MAX_DISTANCE;
    for (int i = 0; i < shapeCount; i++) {
        sd = min(sd, sdShape(p - shapes[i].position.xyz, shapes[i]));
    }
    return sd;
}
float mapShape(in vec3 p, out int shapeID) {
    float sd = MAX_DISTANCE;
    float s;
    for (int i = 0; i < shapeCount; i++) {
        if ((s = sdShape(p - shapes[i].position.xyz, shapes[i])) < sd) {
            sd = s;
            shapeID = i;
        }
    }
    return sd;
}

float intersect(in vec3 p, in vec3 dir, in float maxDepth, out vec4 sdpos) {
    float sd;
    for (float depth = EPSILON; depth < maxDepth; depth += sd) {
        vec3 cp = p + depth * dir;
        float sd = map(cp);
        if (sd < MIN_HIT_DISTANCE) {
            sdpos.xyz = cp;
            sdpos.w = sd;
            return depth;
        }
    }
    return maxDepth;
}
float intersectShape(in vec3 p, in vec3 dir, in float maxDepth, out vec4 sdpos, out int shapeID) {
    float sd;
    for (float depth = EPSILON; depth < maxDepth; depth += sd) {
        vec3 cp = p + depth * dir;
        sd = mapShape(cp, shapeID);
        if (sd < MIN_HIT_DISTANCE) {
            sdpos.xyz = cp;
            sdpos.w = sd;
            return depth;
        }
    }
    return maxDepth;
}

vec3 sceneNormal(in vec3 p, in float sd) {
#if 1
    const vec2 e = vec2(EPSILON, 0);
    return normalize(vec3(
        sd - map(vec3(p - e.xyy)),
        sd - map(vec3(p - e.yxy)),
        sd - map(vec3(p - e.yyx))
    ));
#else
    vec3 n = vec3(0.0);
    for(int i = 0; i < 4; i++) {
        vec3 e = 0.5773 * (2.0 * vec3((((i + 3) >> 1) & 1),((i >> 1) & 1),(i & 1)) - 1.0);
        n += e * map(p + 0.0005 * e).x;
    }
    return normalize(n);
#endif
}

/* ------------- LIGHT --------------- */

float hardShadow(in vec3 p, in vec3 ldir, in float mint, in float maxt) {
    for (float t = mint; t < maxt;) {
        float sd = map(p + ldir * t);
        if (sd < MIN_HIT_DISTANCE) return 0.0f;
        t += sd;
    }
    return 1.0;
}
float softShadow(in vec3 p, in vec3 ldir, in float mint, in float maxt, in float k) {
    float res = 1.0f;
    float ph = 1e20f;
    for (float t = mint; t < maxt;) {
        float sd = map(p + ldir * t);
        if (sd < MIN_HIT_DISTANCE) return 0.0f;
        float y = sd * sd / (2.0f * ph);
        float d = sqrt(sd * sd - y * y);
        res = min(res, k * d / max(0.0f, t - y));
        ph = sd;
        t += sd;
    }
    return res;
}

#define HASHSCALE1 0.1031
float hash(float p) {
    vec3 p3  = fract(vec3(p) * HASHSCALE1);
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.x + p3.y) * p3.z);
}
vec3 randomSphereDir(vec2 rnd) {
    float s = rnd.x * PI * 2.0;
    float t = rnd.y * 2.0 - 1.0;
    return vec3(sin(s), cos(s), t) / sqrt(1.0 + t * t);
}
vec3 randomHemisphereDir(vec3 dir, float i) {
    vec3 v = randomSphereDir(vec2(hash(i + 1), hash(i + 2)));
    return v * sign(dot(v, dir));
}
float ambientOcclusion(in vec3 p, in vec3 n, in float maxDist, in float falloff) {
    const int nbIte = 4;
    const float nbIteInv = 1 / float(nbIte);
    const float rad = 1 - 1 * nbIteInv; //Hemispherical factor (self occlusion correction)

    float ao = 0.0;
    for(int i = 0; i < nbIte; i++) {
        float l = hash(float(i)) * maxDist;
        vec3 rd = normalize(n + randomHemisphereDir(n, l) * rad) * l; // mix direction with the normal for self occlusion problems!
        ao += (l - max(map(p + rd), 0)) / maxDist * falloff;
    }
    return clamp(1 - ao * nbIteInv, 0, 1);
}

float DistributionGGX(vec3 N, vec3 H, float a) {
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom       = PI * denom * denom;

    return nom / denom;
}
float GeometrySchlickGGX(float NdotV, float k) {
    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float k) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx1 = GeometrySchlickGGX(NdotV, k);
    float ggx2 = GeometrySchlickGGX(NdotL, k);

    return ggx1 * ggx2;
}
vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(max(1.0 - cosTheta, 0.0), 5.0);
}

vec3 shade(in vec3 p, in vec3 N, in int materialID) {
    const vec3 lightDir   = normalize(vec3(-0.5, 1.0, 0.5));
    const vec3 lightColor = vec3(23.47, 21.31, 20.79);
    const vec3 albedo     = materials[materialID].albedo;
	const float roughness = materials[materialID].roughness;
	const float metallic  = materials[materialID].metallic;
    
    vec3 V = normalize(eye - p);
    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metallic);

    // Calculate light radiance
    vec3 L = lightDir;
    vec3 H = normalize(V + L);
    float attenuation = softShadow(p + N * EPSILON, lightDir, 0.0f, MAX_DISTANCE, 8.0f); //1.0f;
	float ambient     = 1.0f; //ambientOcclusion(p, N, 1.0, 1.0);
    vec3 radiance     = lightColor * attenuation * ambient;

    // Cook-Torrance BRDF
    float NDF = DistributionGGX(N, H, roughness);
    float G   = GeometrySmith(N, V, L, roughness);
    vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);

    vec3 kS = F;
    vec3 kD = vec3(1.0) - kS;
    kD *= 1.0 - metallic;

    vec3 numerator    = NDF * G * F;
    float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
    vec3 specular     = numerator / max(denominator, 0.001);

    // Add to outgoing radiance Lo
    vec3 Lo = vec3(0);
    float NdotL = max(dot(N, L), 0.0);
    Lo += (kD * albedo / PI + specular) * radiance * NdotL;

    return Lo;
}

vec3 raymarch(in vec3 eye, in vec3 dir) {
    //const vec3 backgroundColor = vec3(1., 163., 236.) / vec3(300.);
    vec3 backgroundColor = vec3(0.05, 0.1, 0.15) * 5.;

    // Debug nearest point
    // float sdc = map(eye);
    // vec3 cnormal = sceneNormal(eye, sdc);
    // vec3 target = eye + -cnormal * sdc;

    vec4 sdpos;
    int shapeID;
    float depth = intersectShape(eye, dir, MAX_DISTANCE, sdpos, shapeID);
    if (depth < MAX_DISTANCE) {
        vec3 normal = sceneNormal(sdpos.xyz, sdpos.w);
        int mID = shapes[shapeID].materialID;
        vec3 color = shade(sdpos.xyz, normal, mID);

        // if (distance(target, sdpos.xyz) < 0.05) color = vec3(1, 0, 0);

		// HDR and Gamma correction
		color = color / (color + vec3(1.0));
		color = pow(color, vec3(1.0 / 2.2));

        return color;
    }

    return backgroundColor + abs(1.0 - dir.y) * 0.4;
}

void main() {
    // Get the pixel position
    ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    // Get the image size
    ivec2 size = imageSize(image);

    // Ignore pixels outside image
    if (any(greaterThanEqual(pos, size)))
        return;

    // Raymarch
    vec3 color = vec3(0);
    vec2 p;
    vec3 dir;

    // Get normalized pixel position
    p = (vec2(pos) + vec2(0.5)) / vec2(size);
    // Get direction vector
    dir = mix(mix(ray00, ray01, p.y), mix(ray10, ray11, p.y), p.x);
    // Get color
    color += raymarch(eye, normalize(dir));

    // Save color
    imageStore(image, pos, vec4(color, 1));
}