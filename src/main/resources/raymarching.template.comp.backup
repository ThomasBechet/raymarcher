#version 450 core

#define MAX_RAYMARCH_STEP  512
#define MAX_DISTANCE       300
#define MAX_BOUNCES		   3
#define MAX_SAMPLES		   1
#define MIN_HIT_DISTANCE   0.0001
#define EPSILON            0.005
#define PI                 3.14159265359
#define SQRT2 			   1.41421356237
#define MAX_SHAPE_COUNT    128
#define MAX_MATERIAL_COUNT 64
#define MAX_INSTANCE_COUNT 128

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(location = 1) uniform vec3 eye;
layout(location = 2) uniform vec3 ray00;
layout(location = 3) uniform vec3 ray01;
layout(location = 4) uniform vec3 ray10;
layout(location = 5) uniform vec3 ray11;
layout(location = 6) uniform vec3 previousEye;
layout(location = 7) uniform vec3 previousRay00;
layout(location = 8) uniform vec3 previousRay01;
layout(location = 9) uniform vec3 previousRay10;
layout(location = 10) uniform vec3 previousRay11;

layout(location = 11) uniform int iFrame;

layout(binding = 0, rgba32f) uniform image2D previousColorImage;
layout(binding = 1, rgba32f) uniform image2D previousPositionDepthImage;
layout(binding = 2, rgba32f) uniform image2D previousNormalMaterialImage;

layout(binding = 3, rgba32f) uniform image2D currentColorImage;
layout(binding = 4, rgba32f) uniform image2D currentPositionDepthImage;
layout(binding = 5, rgba32f) uniform image2D currentNormalMaterialImage;

/* ------------- Structures --------------- */
struct Material {
    vec3 albedo;	 // 12 0
    float roughness; // 4  12
	float metallic;  // 4  16
	int _pad0;		 // 4  20
	int _pad1;		 // 4  24
	int _pad2;		 // 4  28
	// total 32
};

struct Shape {
    int type;       // 4  0
    int materialID; // 4  4
    int _pad0;      // 4  8
    int _pad1;      // 4  12
    vec3 position;  // 12 16
    vec4 f0;        // 16 32
    vec4 f1;        // 16 48
	// total 52
};

/* ------------- UBO ---------------------- */
layout(binding = 6, std140) uniform LayoutHeader {
    int materialCount;
    int shapeCount;
};

layout(binding = 7, std140) uniform Materials {
    Material materials[MAX_MATERIAL_COUNT];
};

layout(binding = 8, std140) uniform Shapes {
    Shape shapes[MAX_SHAPE_COUNT];
};

/* ------------ SHAPES SDF --------- */

#SHAPE_SD_FUNCTIONS

/* ----------- SCENE -------------- */

#MAP_SD_FUNCTION

float map(in vec3 p) {
    float sd = MAX_DISTANCE;
    for (int i = 0; i < shapeCount; i++) {
        sd = min(sd, sdShape(p - shapes[i].position.xyz, shapes[i]));
    }
    return sd;
}
float mapShape(in vec3 p, out int shapeID) {
    float sd = MAX_DISTANCE;
    float s;
    for (int i = 0; i < shapeCount; i++) {
        if ((s = sdShape(p - shapes[i].position.xyz, shapes[i])) < sd) {
            sd = s;
            shapeID = i;
        }
    }
    return sd;
}

float intersect(in vec3 p, in vec3 dir, in float maxDepth, out vec4 sdpos) {
    float sd;
	float depth = EPSILON;
    for (int step = 0; step < MAX_RAYMARCH_STEP; step++) {
        vec3 cp = p + depth * dir;
        float sd = map(cp);
        
		if (sd < MIN_HIT_DISTANCE) {
            sdpos.xyz = cp;
            sdpos.w = sd;
            return depth;
        }
		
		depth += sd;
		if (depth > maxDepth) break;
    }
    return maxDepth;
}
float intersectShape(in vec3 p, in vec3 dir, in float maxDepth, out vec4 sdpos, out int shapeID) {
    float sd;
	float depth = EPSILON;
    for (int step = 0; step < MAX_RAYMARCH_STEP; step++) {
        vec3 cp = p + depth * dir;
        sd = mapShape(cp, shapeID);
		
        if (sd < MIN_HIT_DISTANCE) {
            sdpos.xyz = cp;
            sdpos.w = sd;
            return depth;
        }
		
		depth += sd;
		if (depth > maxDepth) break;
    }
    //return maxDepth;
	return depth;
}

vec3 sceneNormal(in vec3 p, in float sd) {
#if 1
    const vec2 e = vec2(EPSILON, 0);
    return normalize(vec3(
        sd - map(vec3(p - e.xyy)),
        sd - map(vec3(p - e.yxy)),
        sd - map(vec3(p - e.yyx))
    ));
#else
    vec3 n = vec3(0.0);
    for(int i = 0; i < 4; i++) {
        vec3 e = 0.5773 * (2.0 * vec3((((i + 3) >> 1) & 1),((i >> 1) & 1),(i & 1)) - 1.0);
        n += e * map(p + 0.0005 * e).x;
    }
    return normalize(n);
#endif
}

/* ------------- LIGHT --------------- */

float hardShadow(in vec3 p, in vec3 ldir, in float mint, in float maxt) {
    for (float t = mint; t < maxt;) {
        float sd = map(p + ldir * t);
        if (sd < MIN_HIT_DISTANCE) return 0.0f;
        t += sd;
    }
    return 1.0;
}
float softShadow(in vec3 p, in vec3 ldir, in float mint, in float maxt, in float k) {
    float res = 1.0f;
    float ph = 1e20f;
    for (float t = mint; t < maxt;) {
        float sd = map(p + ldir * t);
        if (sd < MIN_HIT_DISTANCE) return 0.0f;
        float y = sd * sd / (2.0f * ph);
        float d = sqrt(sd * sd - y * y);
        res = min(res, k * d / max(0.0f, t - y));
        ph = sd;
        t += sd;
    }
    return res;
}

float nrand(in vec2 n) {
	return fract(sin(dot(n.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 shade(in vec3 p, in vec3 N, in int materialID) {
    const vec3 lightDir   = normalize(vec3(-0.5, 1.0, 0.5));
    const vec3 lightColor = vec3(0.619095, 0.562118, 0.548401);
    const vec3 albedo     = materials[materialID].albedo;
	const float roughness = materials[materialID].roughness;
	const float metallic  = materials[materialID].metallic;
    
	const vec3 L         = normalize(lightDir);
	const float shadow   = softShadow(p, L, EPSILON, MAX_DISTANCE, 32.0);
	const float Idiffuse = max(dot(N, L), 0.0);
	
    return albedo * Idiffuse * shadow;
}

vec3 pathRay(in vec3 pos, in vec3 dir, in vec2 seed) {
	vec3 accumulatedColor = vec3(0);
	vec3 colorMask        = vec3(1);
	
	for (int b = 0; b < MAX_BOUNCES; b++) {
		vec4 sdpos;
		int shapeID;
		float depth;
		
		depth = intersectShape(pos, dir, MAX_DISTANCE, sdpos, shapeID);
		if (depth < MAX_DISTANCE) { // Intersection detected
		
			// Get geometry information
			const vec3 normal    = sceneNormal(sdpos.xyz, sdpos.w);
			const int materialID = shapes[shapeID].materialID;
			const vec3 albedo    = materials[materialID].albedo;
			
			// Update next ray position
			pos = sdpos.xyz + normal * EPSILON; // Avoid self intersection
			
			// Generate random dir vector
			vec3 rs     = pos + seed.x;
			vec3 random = vec3(nrand(rs.xy), nrand(rs.yz), nrand(rs.zx)) * 2.0 - 1.0;
			dir         = normalize(normal * SQRT2 + random);
			
			// Compute direct lighting
			const vec3 sunDir   = normalize(vec3(-0.5, 1.0, 0.5));
			const vec3 sunColor = vec3(0.619095, 0.562118, 0.548401);
			const vec3 skyColor = vec3(1);
			vec3 color = vec3(0);
			
			// Sun color
			float sunDot = max(0, dot(sunDir, normal));
			float sunShadow = 1.0f;
			if (sunDot > 0.0f) {
				//sunShadow = softShadow(sdpos.xyz + normal * EPSILON, sunDir, EPSILON, MAX_DISTANCE, 32.0);
				sunShadow = hardShadow(sdpos.xyz + normal * EPSILON, sunDir, EPSILON, MAX_DISTANCE);
			}
			color += sunDot * sunShadow * sunColor * vec3(2.0);
			
			colorMask *= albedo;
			accumulatedColor += colorMask * color;
			
			//float fresnel   = clamp(dot(dir, normal) + 1.0, 0.0, 1.0) * 0.9;
			//float ref = 1.0;
			//ref       = mix(ref, 1.0, fresnel);
			
			//vec3 matte = normalize(normal * SQRT2 + random);
			
			//vec3 refl   = reflect(dir, normal);
			//vec3 newDir = mix(matte, refl, ref);
			
			//float s = step(fresnel, nrand(seed));
			//dir     = normalize(newDir * s + refl * (1.0 - s)); // Update direction
		
		} else { // Sky intersection
			if (b == 0) { // Direct sky intersection
				const vec3 backgroundColor = vec3(1., 163., 236.) / vec3(500);
				return backgroundColor + abs(1.0 - dir.y) * 0.4;
			}
			break;
		}
	}
	
	return accumulatedColor;
}

vec3 raymarch(in vec3 eye, in vec3 pixelDir, in vec2 seed) {
	vec3 result = vec3(0);
	for (int s = 0; s < MAX_SAMPLES; s++) {
		result += pathRay(eye, pixelDir, seed);
		seed += 1.0;
	}
	return result / MAX_SAMPLES;
}

vec2 reproject(in vec3 pos) {
	vec3 previousDir = normalize(pos - previousEye);
	
	vec3 r0010 = previousRay10 - previousRay00;
	float px = dot(pos - previousRay00, r0010) / length(r0010);
	vec3 r0001 = previousRay01 - previousRay00;
	float py = dot(pos - previousRay00, r0001) / length(r0001);
	
	return vec2(px, py);
}

void main() {
    // Get the pixel position
    const ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
    // Get the image size
    const ivec2 size = imageSize(currentColorImage);

    // Ignore pixels outside image
    if (any(greaterThanEqual(pos, size)))
        return;
	
	// Generate seed
	const vec2 seed = pos + iFrame;

	// Compute pixel random offset for AA
	vec2 offset = vec2(nrand(seed), nrand(seed + 1));
    // Get normalized pixel position
    vec2 p = (vec2(pos) + offset) / vec2(size);
    // Get direction vector
    vec3 dir = mix(mix(ray00, ray01, p.y), mix(ray10, ray11, p.y), p.x);
	
	// Primary ray
	
	
    // Get color
    vec3 color = raymarch(eye, normalize(dir), seed);

    // Save color
	vec3 prevColor = imageLoad(previousColorImage, pos).rgb;
	vec3 radiance = mix(prevColor, color, 1.0f / (iFrame + 1.0f));
    imageStore(currentColorImage, pos, vec4(radiance, 1));
}