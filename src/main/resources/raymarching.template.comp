#version 450 core

#define MAX_BOUNCES		   4
#define MAX_SAMPLES		   1
#define PI                 3.14159265359
#define SQRT2 			   1.41421356237

#include <scene.glsl>
#include <direct_lighting.glsl>

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(location = 0) uniform vec3 eye;
layout(location = 1) uniform vec3 previousEye;
layout(location = 2) uniform mat4 camMat;
layout(location = 3) uniform mat4 previousCamMat;

layout(location = 4) uniform int iFrame;

layout(binding = 0, rgba32f) uniform image2D previousColorImage;
layout(binding = 1, rgba32f) uniform image2D previousPositionDepthImage;
layout(binding = 2, rgba32f) uniform image2D previousNormalMaterialImage;

layout(binding = 3, rgba32f) uniform image2D currentColorImage;
layout(binding = 4, rgba32f) uniform image2D currentPositionDepthImage;
layout(binding = 5, rgba32f) uniform image2D currentNormalMaterialImage;

/* ------------- INDIRECT LIGHT --------------- */

float nrand(in vec2 n) {
	return fract(sin(dot(n.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

vec3 samplePosition(in vec3 pos, in vec3 rayDir, in vec3 normal, in int materialID, in vec2 seed) {
	vec3 accumulatedColor = vec3(0);
	vec3 colorMask        = vec3(1);
	
	// Compute direct lighting
	colorMask *= materials[materialID].albedo;
	accumulatedColor += colorMask * directLight(pos.xyz, normal);
	
	// Compute indirect lighting
	pos += normal * EPSILON;
	for (int b = 0; b < MAX_BOUNCES; b++) {
		
		// Generate random dir vector
		vec3 rs     = pos + seed.x;
		vec3 random = vec3(nrand(rs.xy), nrand(rs.yz), nrand(rs.zx)) * 2.0 - 1.0;
		vec3 dir    = normalize(normal * SQRT2 + random);
		
		vec4 sdpos;
		int shapeID;
		float depth = intersectShape(pos, dir, MAX_DISTANCE, sdpos, shapeID);
		if (depth < MAX_DISTANCE) { // Intersection detected
		
			// Get geometry information
			normal     = sceneNormal(sdpos.xyz, sdpos.w);
			materialID = shapes[shapeID].materialID;
			
			colorMask *= materials[materialID].albedo;
			accumulatedColor += colorMask * directLight(sdpos.xyz, normal);
			
			// Update next ray position
			pos = sdpos.xyz + normal * EPSILON; // Avoid self intersection
		
		} else { 
			break; // No more geometry, exit path
		}
	}
	
	return accumulatedColor;
}

/*vec3 raymarch(in vec3 eye, in vec3 pixelDir, in vec2 seed) {
	vec3 result = vec3(0);
	for (int s = 0; s < MAX_SAMPLES; s++) {
		result += pathRay(eye, pixelDir, seed);
		seed += 1.0;
	}
	return result / MAX_SAMPLES;
}*/

vec2 reproject(in vec3 pos) {
	vec4 ptransform = previousCamMat * vec4(pos, 1.0);
	ptransform /= ptransform.w;
	return (vec2(ptransform.xy) + 1.0) * 0.5;
}

void main() {
    // Get the pixel position
    const ivec2 coord = ivec2(gl_GlobalInvocationID.xy);
    // Get the image size
    const ivec2 size = imageSize(currentColorImage);

    // Ignore pixels outside image
    if (any(greaterThanEqual(coord, size)))
        return;
	
	// Generate seed
	const vec2 seed = coord + iFrame;

	vec2 offset = vec2(0.5); //vec2(nrand(seed), nrand(seed + 23.41245));
    // Get normalized pixel position
    vec2 p = ((coord + offset) / vec2(size)) * 2.0 - 1.0;
    // Get direction vector
	vec4 ptransform = inverse(camMat) * vec4(p, 1, 1);
	vec3 dir = normalize((ptransform / ptransform.w).xyz - eye);
	
	// Final color
	vec3 color = vec3(0);
	float weight = 1.0;
	
	// Primary ray
	vec4 sdpos;
	int shapeID;
	float depth = intersectShape(eye, dir, MAX_DISTANCE, sdpos, shapeID);
	if (depth < MAX_DISTANCE) {
		// Compute primary ray normal
		vec3 normal = sceneNormal(sdpos.xyz, sdpos.w);
		
		// Sample position
		color = samplePosition(sdpos.xyz, dir, normal, shapes[shapeID].materialID, seed);
		
		// Try reproject point
		vec2 previousUV = reproject(sdpos.xyz);
		ivec2 previousCoord = ivec2(previousUV * vec2(size));
		if (previousCoord.x > 1 && previousCoord.x < size.x - 1 && previousCoord.y > 1 && previousCoord.y < size.y - 1) {	
			float minSampleCount = 10e31;
			vec3 filtered = vec3(0);
			float totalWeight = 0.0;
			vec2 interp = fract(previousUV);
			
			for (int dY = 0; dY <= 1; dY++) {
				for (int dX = 0; dX <= 1; dX++) {
					ivec2 tapCoord = previousCoord + ivec2(dX, dY);
					
					vec4 previousColor = imageLoad(previousColorImage, tapCoord).xyzw;
					vec4 previousPositionDepth = imageLoad(previousPositionDepthImage, tapCoord).xyzw;
					vec4 previousNormalMaterial = imageLoad(previousNormalMaterialImage, tapCoord).xyzw;
					
					if (abs(1.0 - (depth / previousPositionDepth.w)) < 0.1 /*&&
						dot(normal, previousNormalMaterial.xyz) >= 0.99*/) {
							
						vec2 bilinear = mix(1.0 - interp, interp, vec2(dX, dY));
						float W = bilinear.x * bilinear.y;
						
						filtered += previousColor.xyz * W;
						totalWeight += W;
						
						float tapWeight = previousColor.w;
						minSampleCount = min(minSampleCount, tapWeight);
						
						//filtered += previousNormalMaterial.xyz * W;
						//.totalWeight += W;
					}
				}
			}
			
			if (totalWeight > 0.0) {
				filtered /= totalWeight;
				
				const float alpha = 0.9;
				
				vec3 filteredColor = mix(filtered, color, alpha);
				color = filteredColor;
				
				float effectiveSampleCount = minSampleCount + 1.0;
				weight = effectiveSampleCount;
			}
		}
		
		// Save geometrical information
		imageStore(currentPositionDepthImage, coord, vec4(sdpos.xyz, depth));
		imageStore(currentNormalMaterialImage, coord, vec4(normal, shapes[shapeID].materialID));
		
	} else { // Hit background
		// Render sky background
		const vec3 backgroundColor = vec3(1., 163., 236.) / vec3(500);
		color = backgroundColor + abs(1.0 - dir.y) * 0.4;
	}

    // Save color
	//vec3 prevColor = imageLoad(currentColorImage, coord).rgb;
	//vec3 radiance = mix(prevColor, color, 1.0f / (iFrame + 1));
	
    imageStore(currentColorImage, coord, vec4(color, weight));
}